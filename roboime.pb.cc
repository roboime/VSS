// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roboime.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "roboime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RoboimeData {

namespace {

const ::google::protobuf::Descriptor* DataBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataYellow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataYellow_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataBlue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataBlue_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataReceiver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataReceiver_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_roboime_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_roboime_2eproto() {
  protobuf_AddDesc_roboime_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "roboime.proto");
  GOOGLE_CHECK(file != NULL);
  DataBall_descriptor_ = file->message_type(0);
  static const int DataBall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBall, ballposex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBall, ballposey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBall, ballspeedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBall, ballspeedy_),
  };
  DataBall_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataBall_descriptor_,
      DataBall::default_instance_,
      DataBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBall, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataBall),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBall, _internal_metadata_),
      -1);
  DataYellow_descriptor_ = file->message_type(1);
  static const int DataYellow_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow0posex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow0posey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow0angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow0speedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow0speedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow0speedangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow1posex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow1posey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow1angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow1speedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow1speedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow1speedangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow2posex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow2posey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow2angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow2speedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow2speedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, yellow2speedangle_),
  };
  DataYellow_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataYellow_descriptor_,
      DataYellow::default_instance_,
      DataYellow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataYellow),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataYellow, _internal_metadata_),
      -1);
  DataBlue_descriptor_ = file->message_type(2);
  static const int DataBlue_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue0posex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue0posey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue0angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue0speedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue0speedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue0speedangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue1posex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue1posey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue1angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue1speedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue1speedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue1speedangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue2posex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue2posey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue2angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue2speedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue2speedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, blue2speedangle_),
  };
  DataBlue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataBlue_descriptor_,
      DataBlue::default_instance_,
      DataBlue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataBlue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataBlue, _internal_metadata_),
      -1);
  DataReceiver_descriptor_ = file->message_type(3);
  static const int DataReceiver_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceiver, friend0velesq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceiver, friend0veldir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceiver, friend1velesq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceiver, friend1veldir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceiver, friend2velesq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceiver, friend2veldir_),
  };
  DataReceiver_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataReceiver_descriptor_,
      DataReceiver::default_instance_,
      DataReceiver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceiver, _has_bits_[0]),
      -1,
      -1,
      sizeof(DataReceiver),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataReceiver, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_roboime_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataBall_descriptor_, &DataBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataYellow_descriptor_, &DataYellow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataBlue_descriptor_, &DataBlue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataReceiver_descriptor_, &DataReceiver::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_roboime_2eproto() {
  delete DataBall::default_instance_;
  delete DataBall_reflection_;
  delete DataYellow::default_instance_;
  delete DataYellow_reflection_;
  delete DataBlue::default_instance_;
  delete DataBlue_reflection_;
  delete DataReceiver::default_instance_;
  delete DataReceiver_reflection_;
}

void protobuf_AddDesc_roboime_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_roboime_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rroboime.proto\022\013RoboimeData\"X\n\010DataBall"
    "\022\021\n\tballPoseX\030\001 \002(\002\022\021\n\tballPoseY\030\002 \002(\002\022\022"
    "\n\nballSpeedX\030\003 \002(\002\022\022\n\nballSpeedY\030\004 \002(\002\"\255"
    "\003\n\nDataYellow\022\024\n\014yellow0PoseX\030\001 \002(\002\022\024\n\014y"
    "ellow0PoseY\030\002 \002(\002\022\024\n\014yellow0Angle\030\003 \002(\002\022"
    "\025\n\ryellow0SpeedX\030\004 \002(\002\022\025\n\ryellow0SpeedY\030"
    "\005 \002(\002\022\031\n\021yellow0SpeedAngle\030\006 \002(\002\022\024\n\014yell"
    "ow1PoseX\030\007 \002(\002\022\024\n\014yellow1PoseY\030\010 \002(\002\022\024\n\014"
    "yellow1Angle\030\t \002(\002\022\025\n\ryellow1SpeedX\030\n \002("
    "\002\022\025\n\ryellow1SpeedY\030\013 \002(\002\022\031\n\021yellow1Speed"
    "Angle\030\014 \002(\002\022\024\n\014yellow2PoseX\030\r \002(\002\022\024\n\014yel"
    "low2PoseY\030\016 \002(\002\022\024\n\014yellow2Angle\030\017 \002(\002\022\025\n"
    "\ryellow2SpeedX\030\020 \002(\002\022\025\n\ryellow2SpeedY\030\021 "
    "\002(\002\022\031\n\021yellow2SpeedAngle\030\022 \002(\002\"\207\003\n\010DataB"
    "lue\022\022\n\nblue0PoseX\030\001 \002(\002\022\022\n\nblue0PoseY\030\002 "
    "\002(\002\022\022\n\nblue0Angle\030\003 \002(\002\022\023\n\013blue0SpeedX\030\004"
    " \002(\002\022\023\n\013blue0SpeedY\030\005 \002(\002\022\027\n\017blue0SpeedA"
    "ngle\030\006 \002(\002\022\022\n\nblue1PoseX\030\007 \002(\002\022\022\n\nblue1P"
    "oseY\030\010 \002(\002\022\022\n\nblue1Angle\030\t \002(\002\022\023\n\013blue1S"
    "peedX\030\n \002(\002\022\023\n\013blue1SpeedY\030\013 \002(\002\022\027\n\017blue"
    "1SpeedAngle\030\014 \002(\002\022\022\n\nblue2PoseX\030\r \002(\002\022\022\n"
    "\nblue2PoseY\030\016 \002(\002\022\022\n\nblue2Angle\030\017 \002(\002\022\023\n"
    "\013blue2SpeedX\030\020 \002(\002\022\023\n\013blue2SpeedY\030\021 \002(\002\022"
    "\027\n\017blue2SpeedAngle\030\022 \002(\002\"\230\001\n\014DataReceive"
    "r\022\025\n\rfriend0VelEsq\030\001 \002(\r\022\025\n\rfriend0VelDi"
    "r\030\002 \002(\r\022\025\n\rfriend1VelEsq\030\003 \002(\r\022\025\n\rfriend"
    "1VelDir\030\004 \002(\r\022\025\n\rfriend2VelEsq\030\005 \002(\r\022\025\n\r"
    "friend2VelDir\030\006 \002(\r", 1099);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "roboime.proto", &protobuf_RegisterTypes);
  DataBall::default_instance_ = new DataBall();
  DataYellow::default_instance_ = new DataYellow();
  DataBlue::default_instance_ = new DataBlue();
  DataReceiver::default_instance_ = new DataReceiver();
  DataBall::default_instance_->InitAsDefaultInstance();
  DataYellow::default_instance_->InitAsDefaultInstance();
  DataBlue::default_instance_->InitAsDefaultInstance();
  DataReceiver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_roboime_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_roboime_2eproto {
  StaticDescriptorInitializer_roboime_2eproto() {
    protobuf_AddDesc_roboime_2eproto();
  }
} static_descriptor_initializer_roboime_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataBall::kBallPoseXFieldNumber;
const int DataBall::kBallPoseYFieldNumber;
const int DataBall::kBallSpeedXFieldNumber;
const int DataBall::kBallSpeedYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataBall::DataBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboimeData.DataBall)
}

void DataBall::InitAsDefaultInstance() {
}

DataBall::DataBall(const DataBall& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboimeData.DataBall)
}

void DataBall::SharedCtor() {
  _cached_size_ = 0;
  ballposex_ = 0;
  ballposey_ = 0;
  ballspeedx_ = 0;
  ballspeedy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataBall::~DataBall() {
  // @@protoc_insertion_point(destructor:RoboimeData.DataBall)
  SharedDtor();
}

void DataBall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataBall_descriptor_;
}

const DataBall& DataBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roboime_2eproto();
  return *default_instance_;
}

DataBall* DataBall::default_instance_ = NULL;

DataBall* DataBall::New(::google::protobuf::Arena* arena) const {
  DataBall* n = new DataBall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataBall::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboimeData.DataBall)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DataBall, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DataBall*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ballposex_, ballspeedy_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboimeData.DataBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float ballPoseX = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ballposex_)));
          set_has_ballposex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ballPoseY;
        break;
      }

      // required float ballPoseY = 2;
      case 2: {
        if (tag == 21) {
         parse_ballPoseY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ballposey_)));
          set_has_ballposey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_ballSpeedX;
        break;
      }

      // required float ballSpeedX = 3;
      case 3: {
        if (tag == 29) {
         parse_ballSpeedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ballspeedx_)));
          set_has_ballspeedx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_ballSpeedY;
        break;
      }

      // required float ballSpeedY = 4;
      case 4: {
        if (tag == 37) {
         parse_ballSpeedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ballspeedy_)));
          set_has_ballspeedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboimeData.DataBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboimeData.DataBall)
  return false;
#undef DO_
}

void DataBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboimeData.DataBall)
  // required float ballPoseX = 1;
  if (has_ballposex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ballposex(), output);
  }

  // required float ballPoseY = 2;
  if (has_ballposey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ballposey(), output);
  }

  // required float ballSpeedX = 3;
  if (has_ballspeedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ballspeedx(), output);
  }

  // required float ballSpeedY = 4;
  if (has_ballspeedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ballspeedy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboimeData.DataBall)
}

::google::protobuf::uint8* DataBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboimeData.DataBall)
  // required float ballPoseX = 1;
  if (has_ballposex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ballposex(), target);
  }

  // required float ballPoseY = 2;
  if (has_ballposey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ballposey(), target);
  }

  // required float ballSpeedX = 3;
  if (has_ballspeedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ballspeedx(), target);
  }

  // required float ballSpeedY = 4;
  if (has_ballspeedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ballspeedy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboimeData.DataBall)
  return target;
}

int DataBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboimeData.DataBall)
  int total_size = 0;

  if (has_ballposex()) {
    // required float ballPoseX = 1;
    total_size += 1 + 4;
  }

  if (has_ballposey()) {
    // required float ballPoseY = 2;
    total_size += 1 + 4;
  }

  if (has_ballspeedx()) {
    // required float ballSpeedX = 3;
    total_size += 1 + 4;
  }

  if (has_ballspeedy()) {
    // required float ballSpeedY = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int DataBall::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RoboimeData.DataBall)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float ballPoseX = 1;
    total_size += 1 + 4;

    // required float ballPoseY = 2;
    total_size += 1 + 4;

    // required float ballSpeedX = 3;
    total_size += 1 + 4;

    // required float ballSpeedY = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboimeData.DataBall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataBall* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboimeData.DataBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboimeData.DataBall)
    MergeFrom(*source);
  }
}

void DataBall::MergeFrom(const DataBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboimeData.DataBall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ballposex()) {
      set_ballposex(from.ballposex());
    }
    if (from.has_ballposey()) {
      set_ballposey(from.ballposey());
    }
    if (from.has_ballspeedx()) {
      set_ballspeedx(from.ballspeedx());
    }
    if (from.has_ballspeedy()) {
      set_ballspeedy(from.ballspeedy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboimeData.DataBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataBall::CopyFrom(const DataBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboimeData.DataBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DataBall::Swap(DataBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataBall::InternalSwap(DataBall* other) {
  std::swap(ballposex_, other->ballposex_);
  std::swap(ballposey_, other->ballposey_);
  std::swap(ballspeedx_, other->ballspeedx_);
  std::swap(ballspeedy_, other->ballspeedy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataBall_descriptor_;
  metadata.reflection = DataBall_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataBall

// required float ballPoseX = 1;
bool DataBall::has_ballposex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataBall::set_has_ballposex() {
  _has_bits_[0] |= 0x00000001u;
}
void DataBall::clear_has_ballposex() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataBall::clear_ballposex() {
  ballposex_ = 0;
  clear_has_ballposex();
}
 float DataBall::ballposex() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBall.ballPoseX)
  return ballposex_;
}
 void DataBall::set_ballposex(float value) {
  set_has_ballposex();
  ballposex_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBall.ballPoseX)
}

// required float ballPoseY = 2;
bool DataBall::has_ballposey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataBall::set_has_ballposey() {
  _has_bits_[0] |= 0x00000002u;
}
void DataBall::clear_has_ballposey() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataBall::clear_ballposey() {
  ballposey_ = 0;
  clear_has_ballposey();
}
 float DataBall::ballposey() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBall.ballPoseY)
  return ballposey_;
}
 void DataBall::set_ballposey(float value) {
  set_has_ballposey();
  ballposey_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBall.ballPoseY)
}

// required float ballSpeedX = 3;
bool DataBall::has_ballspeedx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataBall::set_has_ballspeedx() {
  _has_bits_[0] |= 0x00000004u;
}
void DataBall::clear_has_ballspeedx() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataBall::clear_ballspeedx() {
  ballspeedx_ = 0;
  clear_has_ballspeedx();
}
 float DataBall::ballspeedx() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBall.ballSpeedX)
  return ballspeedx_;
}
 void DataBall::set_ballspeedx(float value) {
  set_has_ballspeedx();
  ballspeedx_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBall.ballSpeedX)
}

// required float ballSpeedY = 4;
bool DataBall::has_ballspeedy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataBall::set_has_ballspeedy() {
  _has_bits_[0] |= 0x00000008u;
}
void DataBall::clear_has_ballspeedy() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataBall::clear_ballspeedy() {
  ballspeedy_ = 0;
  clear_has_ballspeedy();
}
 float DataBall::ballspeedy() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBall.ballSpeedY)
  return ballspeedy_;
}
 void DataBall::set_ballspeedy(float value) {
  set_has_ballspeedy();
  ballspeedy_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBall.ballSpeedY)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataYellow::kYellow0PoseXFieldNumber;
const int DataYellow::kYellow0PoseYFieldNumber;
const int DataYellow::kYellow0AngleFieldNumber;
const int DataYellow::kYellow0SpeedXFieldNumber;
const int DataYellow::kYellow0SpeedYFieldNumber;
const int DataYellow::kYellow0SpeedAngleFieldNumber;
const int DataYellow::kYellow1PoseXFieldNumber;
const int DataYellow::kYellow1PoseYFieldNumber;
const int DataYellow::kYellow1AngleFieldNumber;
const int DataYellow::kYellow1SpeedXFieldNumber;
const int DataYellow::kYellow1SpeedYFieldNumber;
const int DataYellow::kYellow1SpeedAngleFieldNumber;
const int DataYellow::kYellow2PoseXFieldNumber;
const int DataYellow::kYellow2PoseYFieldNumber;
const int DataYellow::kYellow2AngleFieldNumber;
const int DataYellow::kYellow2SpeedXFieldNumber;
const int DataYellow::kYellow2SpeedYFieldNumber;
const int DataYellow::kYellow2SpeedAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataYellow::DataYellow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboimeData.DataYellow)
}

void DataYellow::InitAsDefaultInstance() {
}

DataYellow::DataYellow(const DataYellow& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboimeData.DataYellow)
}

void DataYellow::SharedCtor() {
  _cached_size_ = 0;
  yellow0posex_ = 0;
  yellow0posey_ = 0;
  yellow0angle_ = 0;
  yellow0speedx_ = 0;
  yellow0speedy_ = 0;
  yellow0speedangle_ = 0;
  yellow1posex_ = 0;
  yellow1posey_ = 0;
  yellow1angle_ = 0;
  yellow1speedx_ = 0;
  yellow1speedy_ = 0;
  yellow1speedangle_ = 0;
  yellow2posex_ = 0;
  yellow2posey_ = 0;
  yellow2angle_ = 0;
  yellow2speedx_ = 0;
  yellow2speedy_ = 0;
  yellow2speedangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataYellow::~DataYellow() {
  // @@protoc_insertion_point(destructor:RoboimeData.DataYellow)
  SharedDtor();
}

void DataYellow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataYellow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataYellow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataYellow_descriptor_;
}

const DataYellow& DataYellow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roboime_2eproto();
  return *default_instance_;
}

DataYellow* DataYellow::default_instance_ = NULL;

DataYellow* DataYellow::New(::google::protobuf::Arena* arena) const {
  DataYellow* n = new DataYellow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataYellow::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboimeData.DataYellow)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DataYellow, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DataYellow*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(yellow0posex_, yellow1posey_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(yellow1angle_, yellow2speedx_);
  }
  ZR_(yellow2speedy_, yellow2speedangle_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataYellow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboimeData.DataYellow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float yellow0PoseX = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow0posex_)));
          set_has_yellow0posex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_yellow0PoseY;
        break;
      }

      // required float yellow0PoseY = 2;
      case 2: {
        if (tag == 21) {
         parse_yellow0PoseY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow0posey_)));
          set_has_yellow0posey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yellow0Angle;
        break;
      }

      // required float yellow0Angle = 3;
      case 3: {
        if (tag == 29) {
         parse_yellow0Angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow0angle_)));
          set_has_yellow0angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_yellow0SpeedX;
        break;
      }

      // required float yellow0SpeedX = 4;
      case 4: {
        if (tag == 37) {
         parse_yellow0SpeedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow0speedx_)));
          set_has_yellow0speedx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_yellow0SpeedY;
        break;
      }

      // required float yellow0SpeedY = 5;
      case 5: {
        if (tag == 45) {
         parse_yellow0SpeedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow0speedy_)));
          set_has_yellow0speedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_yellow0SpeedAngle;
        break;
      }

      // required float yellow0SpeedAngle = 6;
      case 6: {
        if (tag == 53) {
         parse_yellow0SpeedAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow0speedangle_)));
          set_has_yellow0speedangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_yellow1PoseX;
        break;
      }

      // required float yellow1PoseX = 7;
      case 7: {
        if (tag == 61) {
         parse_yellow1PoseX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow1posex_)));
          set_has_yellow1posex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_yellow1PoseY;
        break;
      }

      // required float yellow1PoseY = 8;
      case 8: {
        if (tag == 69) {
         parse_yellow1PoseY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow1posey_)));
          set_has_yellow1posey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_yellow1Angle;
        break;
      }

      // required float yellow1Angle = 9;
      case 9: {
        if (tag == 77) {
         parse_yellow1Angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow1angle_)));
          set_has_yellow1angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_yellow1SpeedX;
        break;
      }

      // required float yellow1SpeedX = 10;
      case 10: {
        if (tag == 85) {
         parse_yellow1SpeedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow1speedx_)));
          set_has_yellow1speedx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_yellow1SpeedY;
        break;
      }

      // required float yellow1SpeedY = 11;
      case 11: {
        if (tag == 93) {
         parse_yellow1SpeedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow1speedy_)));
          set_has_yellow1speedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_yellow1SpeedAngle;
        break;
      }

      // required float yellow1SpeedAngle = 12;
      case 12: {
        if (tag == 101) {
         parse_yellow1SpeedAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow1speedangle_)));
          set_has_yellow1speedangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_yellow2PoseX;
        break;
      }

      // required float yellow2PoseX = 13;
      case 13: {
        if (tag == 109) {
         parse_yellow2PoseX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow2posex_)));
          set_has_yellow2posex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_yellow2PoseY;
        break;
      }

      // required float yellow2PoseY = 14;
      case 14: {
        if (tag == 117) {
         parse_yellow2PoseY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow2posey_)));
          set_has_yellow2posey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_yellow2Angle;
        break;
      }

      // required float yellow2Angle = 15;
      case 15: {
        if (tag == 125) {
         parse_yellow2Angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow2angle_)));
          set_has_yellow2angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_yellow2SpeedX;
        break;
      }

      // required float yellow2SpeedX = 16;
      case 16: {
        if (tag == 133) {
         parse_yellow2SpeedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow2speedx_)));
          set_has_yellow2speedx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_yellow2SpeedY;
        break;
      }

      // required float yellow2SpeedY = 17;
      case 17: {
        if (tag == 141) {
         parse_yellow2SpeedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow2speedy_)));
          set_has_yellow2speedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_yellow2SpeedAngle;
        break;
      }

      // required float yellow2SpeedAngle = 18;
      case 18: {
        if (tag == 149) {
         parse_yellow2SpeedAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yellow2speedangle_)));
          set_has_yellow2speedangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboimeData.DataYellow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboimeData.DataYellow)
  return false;
#undef DO_
}

void DataYellow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboimeData.DataYellow)
  // required float yellow0PoseX = 1;
  if (has_yellow0posex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->yellow0posex(), output);
  }

  // required float yellow0PoseY = 2;
  if (has_yellow0posey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yellow0posey(), output);
  }

  // required float yellow0Angle = 3;
  if (has_yellow0angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yellow0angle(), output);
  }

  // required float yellow0SpeedX = 4;
  if (has_yellow0speedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yellow0speedx(), output);
  }

  // required float yellow0SpeedY = 5;
  if (has_yellow0speedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->yellow0speedy(), output);
  }

  // required float yellow0SpeedAngle = 6;
  if (has_yellow0speedangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yellow0speedangle(), output);
  }

  // required float yellow1PoseX = 7;
  if (has_yellow1posex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yellow1posex(), output);
  }

  // required float yellow1PoseY = 8;
  if (has_yellow1posey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->yellow1posey(), output);
  }

  // required float yellow1Angle = 9;
  if (has_yellow1angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->yellow1angle(), output);
  }

  // required float yellow1SpeedX = 10;
  if (has_yellow1speedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->yellow1speedx(), output);
  }

  // required float yellow1SpeedY = 11;
  if (has_yellow1speedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->yellow1speedy(), output);
  }

  // required float yellow1SpeedAngle = 12;
  if (has_yellow1speedangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->yellow1speedangle(), output);
  }

  // required float yellow2PoseX = 13;
  if (has_yellow2posex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->yellow2posex(), output);
  }

  // required float yellow2PoseY = 14;
  if (has_yellow2posey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->yellow2posey(), output);
  }

  // required float yellow2Angle = 15;
  if (has_yellow2angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->yellow2angle(), output);
  }

  // required float yellow2SpeedX = 16;
  if (has_yellow2speedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->yellow2speedx(), output);
  }

  // required float yellow2SpeedY = 17;
  if (has_yellow2speedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->yellow2speedy(), output);
  }

  // required float yellow2SpeedAngle = 18;
  if (has_yellow2speedangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->yellow2speedangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboimeData.DataYellow)
}

::google::protobuf::uint8* DataYellow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboimeData.DataYellow)
  // required float yellow0PoseX = 1;
  if (has_yellow0posex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->yellow0posex(), target);
  }

  // required float yellow0PoseY = 2;
  if (has_yellow0posey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yellow0posey(), target);
  }

  // required float yellow0Angle = 3;
  if (has_yellow0angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yellow0angle(), target);
  }

  // required float yellow0SpeedX = 4;
  if (has_yellow0speedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yellow0speedx(), target);
  }

  // required float yellow0SpeedY = 5;
  if (has_yellow0speedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->yellow0speedy(), target);
  }

  // required float yellow0SpeedAngle = 6;
  if (has_yellow0speedangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yellow0speedangle(), target);
  }

  // required float yellow1PoseX = 7;
  if (has_yellow1posex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yellow1posex(), target);
  }

  // required float yellow1PoseY = 8;
  if (has_yellow1posey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->yellow1posey(), target);
  }

  // required float yellow1Angle = 9;
  if (has_yellow1angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->yellow1angle(), target);
  }

  // required float yellow1SpeedX = 10;
  if (has_yellow1speedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->yellow1speedx(), target);
  }

  // required float yellow1SpeedY = 11;
  if (has_yellow1speedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->yellow1speedy(), target);
  }

  // required float yellow1SpeedAngle = 12;
  if (has_yellow1speedangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->yellow1speedangle(), target);
  }

  // required float yellow2PoseX = 13;
  if (has_yellow2posex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->yellow2posex(), target);
  }

  // required float yellow2PoseY = 14;
  if (has_yellow2posey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->yellow2posey(), target);
  }

  // required float yellow2Angle = 15;
  if (has_yellow2angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->yellow2angle(), target);
  }

  // required float yellow2SpeedX = 16;
  if (has_yellow2speedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->yellow2speedx(), target);
  }

  // required float yellow2SpeedY = 17;
  if (has_yellow2speedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->yellow2speedy(), target);
  }

  // required float yellow2SpeedAngle = 18;
  if (has_yellow2speedangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->yellow2speedangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboimeData.DataYellow)
  return target;
}

int DataYellow::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboimeData.DataYellow)
  int total_size = 0;

  if (has_yellow0posex()) {
    // required float yellow0PoseX = 1;
    total_size += 1 + 4;
  }

  if (has_yellow0posey()) {
    // required float yellow0PoseY = 2;
    total_size += 1 + 4;
  }

  if (has_yellow0angle()) {
    // required float yellow0Angle = 3;
    total_size += 1 + 4;
  }

  if (has_yellow0speedx()) {
    // required float yellow0SpeedX = 4;
    total_size += 1 + 4;
  }

  if (has_yellow0speedy()) {
    // required float yellow0SpeedY = 5;
    total_size += 1 + 4;
  }

  if (has_yellow0speedangle()) {
    // required float yellow0SpeedAngle = 6;
    total_size += 1 + 4;
  }

  if (has_yellow1posex()) {
    // required float yellow1PoseX = 7;
    total_size += 1 + 4;
  }

  if (has_yellow1posey()) {
    // required float yellow1PoseY = 8;
    total_size += 1 + 4;
  }

  if (has_yellow1angle()) {
    // required float yellow1Angle = 9;
    total_size += 1 + 4;
  }

  if (has_yellow1speedx()) {
    // required float yellow1SpeedX = 10;
    total_size += 1 + 4;
  }

  if (has_yellow1speedy()) {
    // required float yellow1SpeedY = 11;
    total_size += 1 + 4;
  }

  if (has_yellow1speedangle()) {
    // required float yellow1SpeedAngle = 12;
    total_size += 1 + 4;
  }

  if (has_yellow2posex()) {
    // required float yellow2PoseX = 13;
    total_size += 1 + 4;
  }

  if (has_yellow2posey()) {
    // required float yellow2PoseY = 14;
    total_size += 1 + 4;
  }

  if (has_yellow2angle()) {
    // required float yellow2Angle = 15;
    total_size += 1 + 4;
  }

  if (has_yellow2speedx()) {
    // required float yellow2SpeedX = 16;
    total_size += 2 + 4;
  }

  if (has_yellow2speedy()) {
    // required float yellow2SpeedY = 17;
    total_size += 2 + 4;
  }

  if (has_yellow2speedangle()) {
    // required float yellow2SpeedAngle = 18;
    total_size += 2 + 4;
  }

  return total_size;
}
int DataYellow::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RoboimeData.DataYellow)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required float yellow0PoseX = 1;
    total_size += 1 + 4;

    // required float yellow0PoseY = 2;
    total_size += 1 + 4;

    // required float yellow0Angle = 3;
    total_size += 1 + 4;

    // required float yellow0SpeedX = 4;
    total_size += 1 + 4;

    // required float yellow0SpeedY = 5;
    total_size += 1 + 4;

    // required float yellow0SpeedAngle = 6;
    total_size += 1 + 4;

    // required float yellow1PoseX = 7;
    total_size += 1 + 4;

    // required float yellow1PoseY = 8;
    total_size += 1 + 4;

    // required float yellow1Angle = 9;
    total_size += 1 + 4;

    // required float yellow1SpeedX = 10;
    total_size += 1 + 4;

    // required float yellow1SpeedY = 11;
    total_size += 1 + 4;

    // required float yellow1SpeedAngle = 12;
    total_size += 1 + 4;

    // required float yellow2PoseX = 13;
    total_size += 1 + 4;

    // required float yellow2PoseY = 14;
    total_size += 1 + 4;

    // required float yellow2Angle = 15;
    total_size += 1 + 4;

    // required float yellow2SpeedX = 16;
    total_size += 2 + 4;

    // required float yellow2SpeedY = 17;
    total_size += 2 + 4;

    // required float yellow2SpeedAngle = 18;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataYellow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboimeData.DataYellow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataYellow* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataYellow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboimeData.DataYellow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboimeData.DataYellow)
    MergeFrom(*source);
  }
}

void DataYellow::MergeFrom(const DataYellow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboimeData.DataYellow)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yellow0posex()) {
      set_yellow0posex(from.yellow0posex());
    }
    if (from.has_yellow0posey()) {
      set_yellow0posey(from.yellow0posey());
    }
    if (from.has_yellow0angle()) {
      set_yellow0angle(from.yellow0angle());
    }
    if (from.has_yellow0speedx()) {
      set_yellow0speedx(from.yellow0speedx());
    }
    if (from.has_yellow0speedy()) {
      set_yellow0speedy(from.yellow0speedy());
    }
    if (from.has_yellow0speedangle()) {
      set_yellow0speedangle(from.yellow0speedangle());
    }
    if (from.has_yellow1posex()) {
      set_yellow1posex(from.yellow1posex());
    }
    if (from.has_yellow1posey()) {
      set_yellow1posey(from.yellow1posey());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yellow1angle()) {
      set_yellow1angle(from.yellow1angle());
    }
    if (from.has_yellow1speedx()) {
      set_yellow1speedx(from.yellow1speedx());
    }
    if (from.has_yellow1speedy()) {
      set_yellow1speedy(from.yellow1speedy());
    }
    if (from.has_yellow1speedangle()) {
      set_yellow1speedangle(from.yellow1speedangle());
    }
    if (from.has_yellow2posex()) {
      set_yellow2posex(from.yellow2posex());
    }
    if (from.has_yellow2posey()) {
      set_yellow2posey(from.yellow2posey());
    }
    if (from.has_yellow2angle()) {
      set_yellow2angle(from.yellow2angle());
    }
    if (from.has_yellow2speedx()) {
      set_yellow2speedx(from.yellow2speedx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_yellow2speedy()) {
      set_yellow2speedy(from.yellow2speedy());
    }
    if (from.has_yellow2speedangle()) {
      set_yellow2speedangle(from.yellow2speedangle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataYellow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboimeData.DataYellow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataYellow::CopyFrom(const DataYellow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboimeData.DataYellow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataYellow::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void DataYellow::Swap(DataYellow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataYellow::InternalSwap(DataYellow* other) {
  std::swap(yellow0posex_, other->yellow0posex_);
  std::swap(yellow0posey_, other->yellow0posey_);
  std::swap(yellow0angle_, other->yellow0angle_);
  std::swap(yellow0speedx_, other->yellow0speedx_);
  std::swap(yellow0speedy_, other->yellow0speedy_);
  std::swap(yellow0speedangle_, other->yellow0speedangle_);
  std::swap(yellow1posex_, other->yellow1posex_);
  std::swap(yellow1posey_, other->yellow1posey_);
  std::swap(yellow1angle_, other->yellow1angle_);
  std::swap(yellow1speedx_, other->yellow1speedx_);
  std::swap(yellow1speedy_, other->yellow1speedy_);
  std::swap(yellow1speedangle_, other->yellow1speedangle_);
  std::swap(yellow2posex_, other->yellow2posex_);
  std::swap(yellow2posey_, other->yellow2posey_);
  std::swap(yellow2angle_, other->yellow2angle_);
  std::swap(yellow2speedx_, other->yellow2speedx_);
  std::swap(yellow2speedy_, other->yellow2speedy_);
  std::swap(yellow2speedangle_, other->yellow2speedangle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataYellow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataYellow_descriptor_;
  metadata.reflection = DataYellow_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataYellow

// required float yellow0PoseX = 1;
bool DataYellow::has_yellow0posex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataYellow::set_has_yellow0posex() {
  _has_bits_[0] |= 0x00000001u;
}
void DataYellow::clear_has_yellow0posex() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataYellow::clear_yellow0posex() {
  yellow0posex_ = 0;
  clear_has_yellow0posex();
}
 float DataYellow::yellow0posex() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow0PoseX)
  return yellow0posex_;
}
 void DataYellow::set_yellow0posex(float value) {
  set_has_yellow0posex();
  yellow0posex_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow0PoseX)
}

// required float yellow0PoseY = 2;
bool DataYellow::has_yellow0posey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataYellow::set_has_yellow0posey() {
  _has_bits_[0] |= 0x00000002u;
}
void DataYellow::clear_has_yellow0posey() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataYellow::clear_yellow0posey() {
  yellow0posey_ = 0;
  clear_has_yellow0posey();
}
 float DataYellow::yellow0posey() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow0PoseY)
  return yellow0posey_;
}
 void DataYellow::set_yellow0posey(float value) {
  set_has_yellow0posey();
  yellow0posey_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow0PoseY)
}

// required float yellow0Angle = 3;
bool DataYellow::has_yellow0angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataYellow::set_has_yellow0angle() {
  _has_bits_[0] |= 0x00000004u;
}
void DataYellow::clear_has_yellow0angle() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataYellow::clear_yellow0angle() {
  yellow0angle_ = 0;
  clear_has_yellow0angle();
}
 float DataYellow::yellow0angle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow0Angle)
  return yellow0angle_;
}
 void DataYellow::set_yellow0angle(float value) {
  set_has_yellow0angle();
  yellow0angle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow0Angle)
}

// required float yellow0SpeedX = 4;
bool DataYellow::has_yellow0speedx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataYellow::set_has_yellow0speedx() {
  _has_bits_[0] |= 0x00000008u;
}
void DataYellow::clear_has_yellow0speedx() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataYellow::clear_yellow0speedx() {
  yellow0speedx_ = 0;
  clear_has_yellow0speedx();
}
 float DataYellow::yellow0speedx() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow0SpeedX)
  return yellow0speedx_;
}
 void DataYellow::set_yellow0speedx(float value) {
  set_has_yellow0speedx();
  yellow0speedx_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow0SpeedX)
}

// required float yellow0SpeedY = 5;
bool DataYellow::has_yellow0speedy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataYellow::set_has_yellow0speedy() {
  _has_bits_[0] |= 0x00000010u;
}
void DataYellow::clear_has_yellow0speedy() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataYellow::clear_yellow0speedy() {
  yellow0speedy_ = 0;
  clear_has_yellow0speedy();
}
 float DataYellow::yellow0speedy() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow0SpeedY)
  return yellow0speedy_;
}
 void DataYellow::set_yellow0speedy(float value) {
  set_has_yellow0speedy();
  yellow0speedy_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow0SpeedY)
}

// required float yellow0SpeedAngle = 6;
bool DataYellow::has_yellow0speedangle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataYellow::set_has_yellow0speedangle() {
  _has_bits_[0] |= 0x00000020u;
}
void DataYellow::clear_has_yellow0speedangle() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataYellow::clear_yellow0speedangle() {
  yellow0speedangle_ = 0;
  clear_has_yellow0speedangle();
}
 float DataYellow::yellow0speedangle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow0SpeedAngle)
  return yellow0speedangle_;
}
 void DataYellow::set_yellow0speedangle(float value) {
  set_has_yellow0speedangle();
  yellow0speedangle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow0SpeedAngle)
}

// required float yellow1PoseX = 7;
bool DataYellow::has_yellow1posex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DataYellow::set_has_yellow1posex() {
  _has_bits_[0] |= 0x00000040u;
}
void DataYellow::clear_has_yellow1posex() {
  _has_bits_[0] &= ~0x00000040u;
}
void DataYellow::clear_yellow1posex() {
  yellow1posex_ = 0;
  clear_has_yellow1posex();
}
 float DataYellow::yellow1posex() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow1PoseX)
  return yellow1posex_;
}
 void DataYellow::set_yellow1posex(float value) {
  set_has_yellow1posex();
  yellow1posex_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow1PoseX)
}

// required float yellow1PoseY = 8;
bool DataYellow::has_yellow1posey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DataYellow::set_has_yellow1posey() {
  _has_bits_[0] |= 0x00000080u;
}
void DataYellow::clear_has_yellow1posey() {
  _has_bits_[0] &= ~0x00000080u;
}
void DataYellow::clear_yellow1posey() {
  yellow1posey_ = 0;
  clear_has_yellow1posey();
}
 float DataYellow::yellow1posey() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow1PoseY)
  return yellow1posey_;
}
 void DataYellow::set_yellow1posey(float value) {
  set_has_yellow1posey();
  yellow1posey_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow1PoseY)
}

// required float yellow1Angle = 9;
bool DataYellow::has_yellow1angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DataYellow::set_has_yellow1angle() {
  _has_bits_[0] |= 0x00000100u;
}
void DataYellow::clear_has_yellow1angle() {
  _has_bits_[0] &= ~0x00000100u;
}
void DataYellow::clear_yellow1angle() {
  yellow1angle_ = 0;
  clear_has_yellow1angle();
}
 float DataYellow::yellow1angle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow1Angle)
  return yellow1angle_;
}
 void DataYellow::set_yellow1angle(float value) {
  set_has_yellow1angle();
  yellow1angle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow1Angle)
}

// required float yellow1SpeedX = 10;
bool DataYellow::has_yellow1speedx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DataYellow::set_has_yellow1speedx() {
  _has_bits_[0] |= 0x00000200u;
}
void DataYellow::clear_has_yellow1speedx() {
  _has_bits_[0] &= ~0x00000200u;
}
void DataYellow::clear_yellow1speedx() {
  yellow1speedx_ = 0;
  clear_has_yellow1speedx();
}
 float DataYellow::yellow1speedx() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow1SpeedX)
  return yellow1speedx_;
}
 void DataYellow::set_yellow1speedx(float value) {
  set_has_yellow1speedx();
  yellow1speedx_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow1SpeedX)
}

// required float yellow1SpeedY = 11;
bool DataYellow::has_yellow1speedy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DataYellow::set_has_yellow1speedy() {
  _has_bits_[0] |= 0x00000400u;
}
void DataYellow::clear_has_yellow1speedy() {
  _has_bits_[0] &= ~0x00000400u;
}
void DataYellow::clear_yellow1speedy() {
  yellow1speedy_ = 0;
  clear_has_yellow1speedy();
}
 float DataYellow::yellow1speedy() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow1SpeedY)
  return yellow1speedy_;
}
 void DataYellow::set_yellow1speedy(float value) {
  set_has_yellow1speedy();
  yellow1speedy_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow1SpeedY)
}

// required float yellow1SpeedAngle = 12;
bool DataYellow::has_yellow1speedangle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DataYellow::set_has_yellow1speedangle() {
  _has_bits_[0] |= 0x00000800u;
}
void DataYellow::clear_has_yellow1speedangle() {
  _has_bits_[0] &= ~0x00000800u;
}
void DataYellow::clear_yellow1speedangle() {
  yellow1speedangle_ = 0;
  clear_has_yellow1speedangle();
}
 float DataYellow::yellow1speedangle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow1SpeedAngle)
  return yellow1speedangle_;
}
 void DataYellow::set_yellow1speedangle(float value) {
  set_has_yellow1speedangle();
  yellow1speedangle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow1SpeedAngle)
}

// required float yellow2PoseX = 13;
bool DataYellow::has_yellow2posex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DataYellow::set_has_yellow2posex() {
  _has_bits_[0] |= 0x00001000u;
}
void DataYellow::clear_has_yellow2posex() {
  _has_bits_[0] &= ~0x00001000u;
}
void DataYellow::clear_yellow2posex() {
  yellow2posex_ = 0;
  clear_has_yellow2posex();
}
 float DataYellow::yellow2posex() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow2PoseX)
  return yellow2posex_;
}
 void DataYellow::set_yellow2posex(float value) {
  set_has_yellow2posex();
  yellow2posex_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow2PoseX)
}

// required float yellow2PoseY = 14;
bool DataYellow::has_yellow2posey() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DataYellow::set_has_yellow2posey() {
  _has_bits_[0] |= 0x00002000u;
}
void DataYellow::clear_has_yellow2posey() {
  _has_bits_[0] &= ~0x00002000u;
}
void DataYellow::clear_yellow2posey() {
  yellow2posey_ = 0;
  clear_has_yellow2posey();
}
 float DataYellow::yellow2posey() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow2PoseY)
  return yellow2posey_;
}
 void DataYellow::set_yellow2posey(float value) {
  set_has_yellow2posey();
  yellow2posey_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow2PoseY)
}

// required float yellow2Angle = 15;
bool DataYellow::has_yellow2angle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DataYellow::set_has_yellow2angle() {
  _has_bits_[0] |= 0x00004000u;
}
void DataYellow::clear_has_yellow2angle() {
  _has_bits_[0] &= ~0x00004000u;
}
void DataYellow::clear_yellow2angle() {
  yellow2angle_ = 0;
  clear_has_yellow2angle();
}
 float DataYellow::yellow2angle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow2Angle)
  return yellow2angle_;
}
 void DataYellow::set_yellow2angle(float value) {
  set_has_yellow2angle();
  yellow2angle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow2Angle)
}

// required float yellow2SpeedX = 16;
bool DataYellow::has_yellow2speedx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DataYellow::set_has_yellow2speedx() {
  _has_bits_[0] |= 0x00008000u;
}
void DataYellow::clear_has_yellow2speedx() {
  _has_bits_[0] &= ~0x00008000u;
}
void DataYellow::clear_yellow2speedx() {
  yellow2speedx_ = 0;
  clear_has_yellow2speedx();
}
 float DataYellow::yellow2speedx() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow2SpeedX)
  return yellow2speedx_;
}
 void DataYellow::set_yellow2speedx(float value) {
  set_has_yellow2speedx();
  yellow2speedx_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow2SpeedX)
}

// required float yellow2SpeedY = 17;
bool DataYellow::has_yellow2speedy() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DataYellow::set_has_yellow2speedy() {
  _has_bits_[0] |= 0x00010000u;
}
void DataYellow::clear_has_yellow2speedy() {
  _has_bits_[0] &= ~0x00010000u;
}
void DataYellow::clear_yellow2speedy() {
  yellow2speedy_ = 0;
  clear_has_yellow2speedy();
}
 float DataYellow::yellow2speedy() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow2SpeedY)
  return yellow2speedy_;
}
 void DataYellow::set_yellow2speedy(float value) {
  set_has_yellow2speedy();
  yellow2speedy_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow2SpeedY)
}

// required float yellow2SpeedAngle = 18;
bool DataYellow::has_yellow2speedangle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DataYellow::set_has_yellow2speedangle() {
  _has_bits_[0] |= 0x00020000u;
}
void DataYellow::clear_has_yellow2speedangle() {
  _has_bits_[0] &= ~0x00020000u;
}
void DataYellow::clear_yellow2speedangle() {
  yellow2speedangle_ = 0;
  clear_has_yellow2speedangle();
}
 float DataYellow::yellow2speedangle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataYellow.yellow2SpeedAngle)
  return yellow2speedangle_;
}
 void DataYellow::set_yellow2speedangle(float value) {
  set_has_yellow2speedangle();
  yellow2speedangle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataYellow.yellow2SpeedAngle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataBlue::kBlue0PoseXFieldNumber;
const int DataBlue::kBlue0PoseYFieldNumber;
const int DataBlue::kBlue0AngleFieldNumber;
const int DataBlue::kBlue0SpeedXFieldNumber;
const int DataBlue::kBlue0SpeedYFieldNumber;
const int DataBlue::kBlue0SpeedAngleFieldNumber;
const int DataBlue::kBlue1PoseXFieldNumber;
const int DataBlue::kBlue1PoseYFieldNumber;
const int DataBlue::kBlue1AngleFieldNumber;
const int DataBlue::kBlue1SpeedXFieldNumber;
const int DataBlue::kBlue1SpeedYFieldNumber;
const int DataBlue::kBlue1SpeedAngleFieldNumber;
const int DataBlue::kBlue2PoseXFieldNumber;
const int DataBlue::kBlue2PoseYFieldNumber;
const int DataBlue::kBlue2AngleFieldNumber;
const int DataBlue::kBlue2SpeedXFieldNumber;
const int DataBlue::kBlue2SpeedYFieldNumber;
const int DataBlue::kBlue2SpeedAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataBlue::DataBlue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboimeData.DataBlue)
}

void DataBlue::InitAsDefaultInstance() {
}

DataBlue::DataBlue(const DataBlue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboimeData.DataBlue)
}

void DataBlue::SharedCtor() {
  _cached_size_ = 0;
  blue0posex_ = 0;
  blue0posey_ = 0;
  blue0angle_ = 0;
  blue0speedx_ = 0;
  blue0speedy_ = 0;
  blue0speedangle_ = 0;
  blue1posex_ = 0;
  blue1posey_ = 0;
  blue1angle_ = 0;
  blue1speedx_ = 0;
  blue1speedy_ = 0;
  blue1speedangle_ = 0;
  blue2posex_ = 0;
  blue2posey_ = 0;
  blue2angle_ = 0;
  blue2speedx_ = 0;
  blue2speedy_ = 0;
  blue2speedangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataBlue::~DataBlue() {
  // @@protoc_insertion_point(destructor:RoboimeData.DataBlue)
  SharedDtor();
}

void DataBlue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataBlue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataBlue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataBlue_descriptor_;
}

const DataBlue& DataBlue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roboime_2eproto();
  return *default_instance_;
}

DataBlue* DataBlue::default_instance_ = NULL;

DataBlue* DataBlue::New(::google::protobuf::Arena* arena) const {
  DataBlue* n = new DataBlue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataBlue::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboimeData.DataBlue)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DataBlue, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DataBlue*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(blue0posex_, blue1posey_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(blue1angle_, blue2speedx_);
  }
  ZR_(blue2speedy_, blue2speedangle_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataBlue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboimeData.DataBlue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float blue0PoseX = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue0posex_)));
          set_has_blue0posex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_blue0PoseY;
        break;
      }

      // required float blue0PoseY = 2;
      case 2: {
        if (tag == 21) {
         parse_blue0PoseY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue0posey_)));
          set_has_blue0posey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_blue0Angle;
        break;
      }

      // required float blue0Angle = 3;
      case 3: {
        if (tag == 29) {
         parse_blue0Angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue0angle_)));
          set_has_blue0angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_blue0SpeedX;
        break;
      }

      // required float blue0SpeedX = 4;
      case 4: {
        if (tag == 37) {
         parse_blue0SpeedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue0speedx_)));
          set_has_blue0speedx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_blue0SpeedY;
        break;
      }

      // required float blue0SpeedY = 5;
      case 5: {
        if (tag == 45) {
         parse_blue0SpeedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue0speedy_)));
          set_has_blue0speedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_blue0SpeedAngle;
        break;
      }

      // required float blue0SpeedAngle = 6;
      case 6: {
        if (tag == 53) {
         parse_blue0SpeedAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue0speedangle_)));
          set_has_blue0speedangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_blue1PoseX;
        break;
      }

      // required float blue1PoseX = 7;
      case 7: {
        if (tag == 61) {
         parse_blue1PoseX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue1posex_)));
          set_has_blue1posex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_blue1PoseY;
        break;
      }

      // required float blue1PoseY = 8;
      case 8: {
        if (tag == 69) {
         parse_blue1PoseY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue1posey_)));
          set_has_blue1posey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_blue1Angle;
        break;
      }

      // required float blue1Angle = 9;
      case 9: {
        if (tag == 77) {
         parse_blue1Angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue1angle_)));
          set_has_blue1angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_blue1SpeedX;
        break;
      }

      // required float blue1SpeedX = 10;
      case 10: {
        if (tag == 85) {
         parse_blue1SpeedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue1speedx_)));
          set_has_blue1speedx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_blue1SpeedY;
        break;
      }

      // required float blue1SpeedY = 11;
      case 11: {
        if (tag == 93) {
         parse_blue1SpeedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue1speedy_)));
          set_has_blue1speedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_blue1SpeedAngle;
        break;
      }

      // required float blue1SpeedAngle = 12;
      case 12: {
        if (tag == 101) {
         parse_blue1SpeedAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue1speedangle_)));
          set_has_blue1speedangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_blue2PoseX;
        break;
      }

      // required float blue2PoseX = 13;
      case 13: {
        if (tag == 109) {
         parse_blue2PoseX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue2posex_)));
          set_has_blue2posex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_blue2PoseY;
        break;
      }

      // required float blue2PoseY = 14;
      case 14: {
        if (tag == 117) {
         parse_blue2PoseY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue2posey_)));
          set_has_blue2posey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_blue2Angle;
        break;
      }

      // required float blue2Angle = 15;
      case 15: {
        if (tag == 125) {
         parse_blue2Angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue2angle_)));
          set_has_blue2angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_blue2SpeedX;
        break;
      }

      // required float blue2SpeedX = 16;
      case 16: {
        if (tag == 133) {
         parse_blue2SpeedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue2speedx_)));
          set_has_blue2speedx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_blue2SpeedY;
        break;
      }

      // required float blue2SpeedY = 17;
      case 17: {
        if (tag == 141) {
         parse_blue2SpeedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue2speedy_)));
          set_has_blue2speedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_blue2SpeedAngle;
        break;
      }

      // required float blue2SpeedAngle = 18;
      case 18: {
        if (tag == 149) {
         parse_blue2SpeedAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blue2speedangle_)));
          set_has_blue2speedangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboimeData.DataBlue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboimeData.DataBlue)
  return false;
#undef DO_
}

void DataBlue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboimeData.DataBlue)
  // required float blue0PoseX = 1;
  if (has_blue0posex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->blue0posex(), output);
  }

  // required float blue0PoseY = 2;
  if (has_blue0posey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->blue0posey(), output);
  }

  // required float blue0Angle = 3;
  if (has_blue0angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->blue0angle(), output);
  }

  // required float blue0SpeedX = 4;
  if (has_blue0speedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->blue0speedx(), output);
  }

  // required float blue0SpeedY = 5;
  if (has_blue0speedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->blue0speedy(), output);
  }

  // required float blue0SpeedAngle = 6;
  if (has_blue0speedangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->blue0speedangle(), output);
  }

  // required float blue1PoseX = 7;
  if (has_blue1posex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->blue1posex(), output);
  }

  // required float blue1PoseY = 8;
  if (has_blue1posey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->blue1posey(), output);
  }

  // required float blue1Angle = 9;
  if (has_blue1angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->blue1angle(), output);
  }

  // required float blue1SpeedX = 10;
  if (has_blue1speedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->blue1speedx(), output);
  }

  // required float blue1SpeedY = 11;
  if (has_blue1speedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->blue1speedy(), output);
  }

  // required float blue1SpeedAngle = 12;
  if (has_blue1speedangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->blue1speedangle(), output);
  }

  // required float blue2PoseX = 13;
  if (has_blue2posex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->blue2posex(), output);
  }

  // required float blue2PoseY = 14;
  if (has_blue2posey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->blue2posey(), output);
  }

  // required float blue2Angle = 15;
  if (has_blue2angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->blue2angle(), output);
  }

  // required float blue2SpeedX = 16;
  if (has_blue2speedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->blue2speedx(), output);
  }

  // required float blue2SpeedY = 17;
  if (has_blue2speedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->blue2speedy(), output);
  }

  // required float blue2SpeedAngle = 18;
  if (has_blue2speedangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->blue2speedangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboimeData.DataBlue)
}

::google::protobuf::uint8* DataBlue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboimeData.DataBlue)
  // required float blue0PoseX = 1;
  if (has_blue0posex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->blue0posex(), target);
  }

  // required float blue0PoseY = 2;
  if (has_blue0posey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->blue0posey(), target);
  }

  // required float blue0Angle = 3;
  if (has_blue0angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->blue0angle(), target);
  }

  // required float blue0SpeedX = 4;
  if (has_blue0speedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->blue0speedx(), target);
  }

  // required float blue0SpeedY = 5;
  if (has_blue0speedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->blue0speedy(), target);
  }

  // required float blue0SpeedAngle = 6;
  if (has_blue0speedangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->blue0speedangle(), target);
  }

  // required float blue1PoseX = 7;
  if (has_blue1posex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->blue1posex(), target);
  }

  // required float blue1PoseY = 8;
  if (has_blue1posey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->blue1posey(), target);
  }

  // required float blue1Angle = 9;
  if (has_blue1angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->blue1angle(), target);
  }

  // required float blue1SpeedX = 10;
  if (has_blue1speedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->blue1speedx(), target);
  }

  // required float blue1SpeedY = 11;
  if (has_blue1speedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->blue1speedy(), target);
  }

  // required float blue1SpeedAngle = 12;
  if (has_blue1speedangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->blue1speedangle(), target);
  }

  // required float blue2PoseX = 13;
  if (has_blue2posex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->blue2posex(), target);
  }

  // required float blue2PoseY = 14;
  if (has_blue2posey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->blue2posey(), target);
  }

  // required float blue2Angle = 15;
  if (has_blue2angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->blue2angle(), target);
  }

  // required float blue2SpeedX = 16;
  if (has_blue2speedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->blue2speedx(), target);
  }

  // required float blue2SpeedY = 17;
  if (has_blue2speedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->blue2speedy(), target);
  }

  // required float blue2SpeedAngle = 18;
  if (has_blue2speedangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->blue2speedangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboimeData.DataBlue)
  return target;
}

int DataBlue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboimeData.DataBlue)
  int total_size = 0;

  if (has_blue0posex()) {
    // required float blue0PoseX = 1;
    total_size += 1 + 4;
  }

  if (has_blue0posey()) {
    // required float blue0PoseY = 2;
    total_size += 1 + 4;
  }

  if (has_blue0angle()) {
    // required float blue0Angle = 3;
    total_size += 1 + 4;
  }

  if (has_blue0speedx()) {
    // required float blue0SpeedX = 4;
    total_size += 1 + 4;
  }

  if (has_blue0speedy()) {
    // required float blue0SpeedY = 5;
    total_size += 1 + 4;
  }

  if (has_blue0speedangle()) {
    // required float blue0SpeedAngle = 6;
    total_size += 1 + 4;
  }

  if (has_blue1posex()) {
    // required float blue1PoseX = 7;
    total_size += 1 + 4;
  }

  if (has_blue1posey()) {
    // required float blue1PoseY = 8;
    total_size += 1 + 4;
  }

  if (has_blue1angle()) {
    // required float blue1Angle = 9;
    total_size += 1 + 4;
  }

  if (has_blue1speedx()) {
    // required float blue1SpeedX = 10;
    total_size += 1 + 4;
  }

  if (has_blue1speedy()) {
    // required float blue1SpeedY = 11;
    total_size += 1 + 4;
  }

  if (has_blue1speedangle()) {
    // required float blue1SpeedAngle = 12;
    total_size += 1 + 4;
  }

  if (has_blue2posex()) {
    // required float blue2PoseX = 13;
    total_size += 1 + 4;
  }

  if (has_blue2posey()) {
    // required float blue2PoseY = 14;
    total_size += 1 + 4;
  }

  if (has_blue2angle()) {
    // required float blue2Angle = 15;
    total_size += 1 + 4;
  }

  if (has_blue2speedx()) {
    // required float blue2SpeedX = 16;
    total_size += 2 + 4;
  }

  if (has_blue2speedy()) {
    // required float blue2SpeedY = 17;
    total_size += 2 + 4;
  }

  if (has_blue2speedangle()) {
    // required float blue2SpeedAngle = 18;
    total_size += 2 + 4;
  }

  return total_size;
}
int DataBlue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RoboimeData.DataBlue)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required float blue0PoseX = 1;
    total_size += 1 + 4;

    // required float blue0PoseY = 2;
    total_size += 1 + 4;

    // required float blue0Angle = 3;
    total_size += 1 + 4;

    // required float blue0SpeedX = 4;
    total_size += 1 + 4;

    // required float blue0SpeedY = 5;
    total_size += 1 + 4;

    // required float blue0SpeedAngle = 6;
    total_size += 1 + 4;

    // required float blue1PoseX = 7;
    total_size += 1 + 4;

    // required float blue1PoseY = 8;
    total_size += 1 + 4;

    // required float blue1Angle = 9;
    total_size += 1 + 4;

    // required float blue1SpeedX = 10;
    total_size += 1 + 4;

    // required float blue1SpeedY = 11;
    total_size += 1 + 4;

    // required float blue1SpeedAngle = 12;
    total_size += 1 + 4;

    // required float blue2PoseX = 13;
    total_size += 1 + 4;

    // required float blue2PoseY = 14;
    total_size += 1 + 4;

    // required float blue2Angle = 15;
    total_size += 1 + 4;

    // required float blue2SpeedX = 16;
    total_size += 2 + 4;

    // required float blue2SpeedY = 17;
    total_size += 2 + 4;

    // required float blue2SpeedAngle = 18;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataBlue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboimeData.DataBlue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataBlue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataBlue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboimeData.DataBlue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboimeData.DataBlue)
    MergeFrom(*source);
  }
}

void DataBlue::MergeFrom(const DataBlue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboimeData.DataBlue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blue0posex()) {
      set_blue0posex(from.blue0posex());
    }
    if (from.has_blue0posey()) {
      set_blue0posey(from.blue0posey());
    }
    if (from.has_blue0angle()) {
      set_blue0angle(from.blue0angle());
    }
    if (from.has_blue0speedx()) {
      set_blue0speedx(from.blue0speedx());
    }
    if (from.has_blue0speedy()) {
      set_blue0speedy(from.blue0speedy());
    }
    if (from.has_blue0speedangle()) {
      set_blue0speedangle(from.blue0speedangle());
    }
    if (from.has_blue1posex()) {
      set_blue1posex(from.blue1posex());
    }
    if (from.has_blue1posey()) {
      set_blue1posey(from.blue1posey());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blue1angle()) {
      set_blue1angle(from.blue1angle());
    }
    if (from.has_blue1speedx()) {
      set_blue1speedx(from.blue1speedx());
    }
    if (from.has_blue1speedy()) {
      set_blue1speedy(from.blue1speedy());
    }
    if (from.has_blue1speedangle()) {
      set_blue1speedangle(from.blue1speedangle());
    }
    if (from.has_blue2posex()) {
      set_blue2posex(from.blue2posex());
    }
    if (from.has_blue2posey()) {
      set_blue2posey(from.blue2posey());
    }
    if (from.has_blue2angle()) {
      set_blue2angle(from.blue2angle());
    }
    if (from.has_blue2speedx()) {
      set_blue2speedx(from.blue2speedx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_blue2speedy()) {
      set_blue2speedy(from.blue2speedy());
    }
    if (from.has_blue2speedangle()) {
      set_blue2speedangle(from.blue2speedangle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataBlue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboimeData.DataBlue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataBlue::CopyFrom(const DataBlue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboimeData.DataBlue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBlue::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void DataBlue::Swap(DataBlue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataBlue::InternalSwap(DataBlue* other) {
  std::swap(blue0posex_, other->blue0posex_);
  std::swap(blue0posey_, other->blue0posey_);
  std::swap(blue0angle_, other->blue0angle_);
  std::swap(blue0speedx_, other->blue0speedx_);
  std::swap(blue0speedy_, other->blue0speedy_);
  std::swap(blue0speedangle_, other->blue0speedangle_);
  std::swap(blue1posex_, other->blue1posex_);
  std::swap(blue1posey_, other->blue1posey_);
  std::swap(blue1angle_, other->blue1angle_);
  std::swap(blue1speedx_, other->blue1speedx_);
  std::swap(blue1speedy_, other->blue1speedy_);
  std::swap(blue1speedangle_, other->blue1speedangle_);
  std::swap(blue2posex_, other->blue2posex_);
  std::swap(blue2posey_, other->blue2posey_);
  std::swap(blue2angle_, other->blue2angle_);
  std::swap(blue2speedx_, other->blue2speedx_);
  std::swap(blue2speedy_, other->blue2speedy_);
  std::swap(blue2speedangle_, other->blue2speedangle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataBlue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataBlue_descriptor_;
  metadata.reflection = DataBlue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataBlue

// required float blue0PoseX = 1;
bool DataBlue::has_blue0posex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataBlue::set_has_blue0posex() {
  _has_bits_[0] |= 0x00000001u;
}
void DataBlue::clear_has_blue0posex() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataBlue::clear_blue0posex() {
  blue0posex_ = 0;
  clear_has_blue0posex();
}
 float DataBlue::blue0posex() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue0PoseX)
  return blue0posex_;
}
 void DataBlue::set_blue0posex(float value) {
  set_has_blue0posex();
  blue0posex_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue0PoseX)
}

// required float blue0PoseY = 2;
bool DataBlue::has_blue0posey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataBlue::set_has_blue0posey() {
  _has_bits_[0] |= 0x00000002u;
}
void DataBlue::clear_has_blue0posey() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataBlue::clear_blue0posey() {
  blue0posey_ = 0;
  clear_has_blue0posey();
}
 float DataBlue::blue0posey() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue0PoseY)
  return blue0posey_;
}
 void DataBlue::set_blue0posey(float value) {
  set_has_blue0posey();
  blue0posey_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue0PoseY)
}

// required float blue0Angle = 3;
bool DataBlue::has_blue0angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataBlue::set_has_blue0angle() {
  _has_bits_[0] |= 0x00000004u;
}
void DataBlue::clear_has_blue0angle() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataBlue::clear_blue0angle() {
  blue0angle_ = 0;
  clear_has_blue0angle();
}
 float DataBlue::blue0angle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue0Angle)
  return blue0angle_;
}
 void DataBlue::set_blue0angle(float value) {
  set_has_blue0angle();
  blue0angle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue0Angle)
}

// required float blue0SpeedX = 4;
bool DataBlue::has_blue0speedx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataBlue::set_has_blue0speedx() {
  _has_bits_[0] |= 0x00000008u;
}
void DataBlue::clear_has_blue0speedx() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataBlue::clear_blue0speedx() {
  blue0speedx_ = 0;
  clear_has_blue0speedx();
}
 float DataBlue::blue0speedx() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue0SpeedX)
  return blue0speedx_;
}
 void DataBlue::set_blue0speedx(float value) {
  set_has_blue0speedx();
  blue0speedx_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue0SpeedX)
}

// required float blue0SpeedY = 5;
bool DataBlue::has_blue0speedy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataBlue::set_has_blue0speedy() {
  _has_bits_[0] |= 0x00000010u;
}
void DataBlue::clear_has_blue0speedy() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataBlue::clear_blue0speedy() {
  blue0speedy_ = 0;
  clear_has_blue0speedy();
}
 float DataBlue::blue0speedy() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue0SpeedY)
  return blue0speedy_;
}
 void DataBlue::set_blue0speedy(float value) {
  set_has_blue0speedy();
  blue0speedy_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue0SpeedY)
}

// required float blue0SpeedAngle = 6;
bool DataBlue::has_blue0speedangle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataBlue::set_has_blue0speedangle() {
  _has_bits_[0] |= 0x00000020u;
}
void DataBlue::clear_has_blue0speedangle() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataBlue::clear_blue0speedangle() {
  blue0speedangle_ = 0;
  clear_has_blue0speedangle();
}
 float DataBlue::blue0speedangle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue0SpeedAngle)
  return blue0speedangle_;
}
 void DataBlue::set_blue0speedangle(float value) {
  set_has_blue0speedangle();
  blue0speedangle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue0SpeedAngle)
}

// required float blue1PoseX = 7;
bool DataBlue::has_blue1posex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DataBlue::set_has_blue1posex() {
  _has_bits_[0] |= 0x00000040u;
}
void DataBlue::clear_has_blue1posex() {
  _has_bits_[0] &= ~0x00000040u;
}
void DataBlue::clear_blue1posex() {
  blue1posex_ = 0;
  clear_has_blue1posex();
}
 float DataBlue::blue1posex() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue1PoseX)
  return blue1posex_;
}
 void DataBlue::set_blue1posex(float value) {
  set_has_blue1posex();
  blue1posex_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue1PoseX)
}

// required float blue1PoseY = 8;
bool DataBlue::has_blue1posey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DataBlue::set_has_blue1posey() {
  _has_bits_[0] |= 0x00000080u;
}
void DataBlue::clear_has_blue1posey() {
  _has_bits_[0] &= ~0x00000080u;
}
void DataBlue::clear_blue1posey() {
  blue1posey_ = 0;
  clear_has_blue1posey();
}
 float DataBlue::blue1posey() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue1PoseY)
  return blue1posey_;
}
 void DataBlue::set_blue1posey(float value) {
  set_has_blue1posey();
  blue1posey_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue1PoseY)
}

// required float blue1Angle = 9;
bool DataBlue::has_blue1angle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DataBlue::set_has_blue1angle() {
  _has_bits_[0] |= 0x00000100u;
}
void DataBlue::clear_has_blue1angle() {
  _has_bits_[0] &= ~0x00000100u;
}
void DataBlue::clear_blue1angle() {
  blue1angle_ = 0;
  clear_has_blue1angle();
}
 float DataBlue::blue1angle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue1Angle)
  return blue1angle_;
}
 void DataBlue::set_blue1angle(float value) {
  set_has_blue1angle();
  blue1angle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue1Angle)
}

// required float blue1SpeedX = 10;
bool DataBlue::has_blue1speedx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DataBlue::set_has_blue1speedx() {
  _has_bits_[0] |= 0x00000200u;
}
void DataBlue::clear_has_blue1speedx() {
  _has_bits_[0] &= ~0x00000200u;
}
void DataBlue::clear_blue1speedx() {
  blue1speedx_ = 0;
  clear_has_blue1speedx();
}
 float DataBlue::blue1speedx() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue1SpeedX)
  return blue1speedx_;
}
 void DataBlue::set_blue1speedx(float value) {
  set_has_blue1speedx();
  blue1speedx_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue1SpeedX)
}

// required float blue1SpeedY = 11;
bool DataBlue::has_blue1speedy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DataBlue::set_has_blue1speedy() {
  _has_bits_[0] |= 0x00000400u;
}
void DataBlue::clear_has_blue1speedy() {
  _has_bits_[0] &= ~0x00000400u;
}
void DataBlue::clear_blue1speedy() {
  blue1speedy_ = 0;
  clear_has_blue1speedy();
}
 float DataBlue::blue1speedy() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue1SpeedY)
  return blue1speedy_;
}
 void DataBlue::set_blue1speedy(float value) {
  set_has_blue1speedy();
  blue1speedy_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue1SpeedY)
}

// required float blue1SpeedAngle = 12;
bool DataBlue::has_blue1speedangle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DataBlue::set_has_blue1speedangle() {
  _has_bits_[0] |= 0x00000800u;
}
void DataBlue::clear_has_blue1speedangle() {
  _has_bits_[0] &= ~0x00000800u;
}
void DataBlue::clear_blue1speedangle() {
  blue1speedangle_ = 0;
  clear_has_blue1speedangle();
}
 float DataBlue::blue1speedangle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue1SpeedAngle)
  return blue1speedangle_;
}
 void DataBlue::set_blue1speedangle(float value) {
  set_has_blue1speedangle();
  blue1speedangle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue1SpeedAngle)
}

// required float blue2PoseX = 13;
bool DataBlue::has_blue2posex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DataBlue::set_has_blue2posex() {
  _has_bits_[0] |= 0x00001000u;
}
void DataBlue::clear_has_blue2posex() {
  _has_bits_[0] &= ~0x00001000u;
}
void DataBlue::clear_blue2posex() {
  blue2posex_ = 0;
  clear_has_blue2posex();
}
 float DataBlue::blue2posex() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue2PoseX)
  return blue2posex_;
}
 void DataBlue::set_blue2posex(float value) {
  set_has_blue2posex();
  blue2posex_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue2PoseX)
}

// required float blue2PoseY = 14;
bool DataBlue::has_blue2posey() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DataBlue::set_has_blue2posey() {
  _has_bits_[0] |= 0x00002000u;
}
void DataBlue::clear_has_blue2posey() {
  _has_bits_[0] &= ~0x00002000u;
}
void DataBlue::clear_blue2posey() {
  blue2posey_ = 0;
  clear_has_blue2posey();
}
 float DataBlue::blue2posey() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue2PoseY)
  return blue2posey_;
}
 void DataBlue::set_blue2posey(float value) {
  set_has_blue2posey();
  blue2posey_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue2PoseY)
}

// required float blue2Angle = 15;
bool DataBlue::has_blue2angle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DataBlue::set_has_blue2angle() {
  _has_bits_[0] |= 0x00004000u;
}
void DataBlue::clear_has_blue2angle() {
  _has_bits_[0] &= ~0x00004000u;
}
void DataBlue::clear_blue2angle() {
  blue2angle_ = 0;
  clear_has_blue2angle();
}
 float DataBlue::blue2angle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue2Angle)
  return blue2angle_;
}
 void DataBlue::set_blue2angle(float value) {
  set_has_blue2angle();
  blue2angle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue2Angle)
}

// required float blue2SpeedX = 16;
bool DataBlue::has_blue2speedx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DataBlue::set_has_blue2speedx() {
  _has_bits_[0] |= 0x00008000u;
}
void DataBlue::clear_has_blue2speedx() {
  _has_bits_[0] &= ~0x00008000u;
}
void DataBlue::clear_blue2speedx() {
  blue2speedx_ = 0;
  clear_has_blue2speedx();
}
 float DataBlue::blue2speedx() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue2SpeedX)
  return blue2speedx_;
}
 void DataBlue::set_blue2speedx(float value) {
  set_has_blue2speedx();
  blue2speedx_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue2SpeedX)
}

// required float blue2SpeedY = 17;
bool DataBlue::has_blue2speedy() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DataBlue::set_has_blue2speedy() {
  _has_bits_[0] |= 0x00010000u;
}
void DataBlue::clear_has_blue2speedy() {
  _has_bits_[0] &= ~0x00010000u;
}
void DataBlue::clear_blue2speedy() {
  blue2speedy_ = 0;
  clear_has_blue2speedy();
}
 float DataBlue::blue2speedy() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue2SpeedY)
  return blue2speedy_;
}
 void DataBlue::set_blue2speedy(float value) {
  set_has_blue2speedy();
  blue2speedy_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue2SpeedY)
}

// required float blue2SpeedAngle = 18;
bool DataBlue::has_blue2speedangle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DataBlue::set_has_blue2speedangle() {
  _has_bits_[0] |= 0x00020000u;
}
void DataBlue::clear_has_blue2speedangle() {
  _has_bits_[0] &= ~0x00020000u;
}
void DataBlue::clear_blue2speedangle() {
  blue2speedangle_ = 0;
  clear_has_blue2speedangle();
}
 float DataBlue::blue2speedangle() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataBlue.blue2SpeedAngle)
  return blue2speedangle_;
}
 void DataBlue::set_blue2speedangle(float value) {
  set_has_blue2speedangle();
  blue2speedangle_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataBlue.blue2SpeedAngle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataReceiver::kFriend0VelEsqFieldNumber;
const int DataReceiver::kFriend0VelDirFieldNumber;
const int DataReceiver::kFriend1VelEsqFieldNumber;
const int DataReceiver::kFriend1VelDirFieldNumber;
const int DataReceiver::kFriend2VelEsqFieldNumber;
const int DataReceiver::kFriend2VelDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataReceiver::DataReceiver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboimeData.DataReceiver)
}

void DataReceiver::InitAsDefaultInstance() {
}

DataReceiver::DataReceiver(const DataReceiver& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboimeData.DataReceiver)
}

void DataReceiver::SharedCtor() {
  _cached_size_ = 0;
  friend0velesq_ = 0u;
  friend0veldir_ = 0u;
  friend1velesq_ = 0u;
  friend1veldir_ = 0u;
  friend2velesq_ = 0u;
  friend2veldir_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReceiver::~DataReceiver() {
  // @@protoc_insertion_point(destructor:RoboimeData.DataReceiver)
  SharedDtor();
}

void DataReceiver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataReceiver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataReceiver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataReceiver_descriptor_;
}

const DataReceiver& DataReceiver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roboime_2eproto();
  return *default_instance_;
}

DataReceiver* DataReceiver::default_instance_ = NULL;

DataReceiver* DataReceiver::New(::google::protobuf::Arena* arena) const {
  DataReceiver* n = new DataReceiver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReceiver::Clear() {
// @@protoc_insertion_point(message_clear_start:RoboimeData.DataReceiver)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DataReceiver, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DataReceiver*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(friend0velesq_, friend2veldir_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DataReceiver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboimeData.DataReceiver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 friend0VelEsq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend0velesq_)));
          set_has_friend0velesq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friend0VelDir;
        break;
      }

      // required uint32 friend0VelDir = 2;
      case 2: {
        if (tag == 16) {
         parse_friend0VelDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend0veldir_)));
          set_has_friend0veldir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_friend1VelEsq;
        break;
      }

      // required uint32 friend1VelEsq = 3;
      case 3: {
        if (tag == 24) {
         parse_friend1VelEsq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend1velesq_)));
          set_has_friend1velesq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_friend1VelDir;
        break;
      }

      // required uint32 friend1VelDir = 4;
      case 4: {
        if (tag == 32) {
         parse_friend1VelDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend1veldir_)));
          set_has_friend1veldir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_friend2VelEsq;
        break;
      }

      // required uint32 friend2VelEsq = 5;
      case 5: {
        if (tag == 40) {
         parse_friend2VelEsq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend2velesq_)));
          set_has_friend2velesq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_friend2VelDir;
        break;
      }

      // required uint32 friend2VelDir = 6;
      case 6: {
        if (tag == 48) {
         parse_friend2VelDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend2veldir_)));
          set_has_friend2veldir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboimeData.DataReceiver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboimeData.DataReceiver)
  return false;
#undef DO_
}

void DataReceiver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboimeData.DataReceiver)
  // required uint32 friend0VelEsq = 1;
  if (has_friend0velesq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->friend0velesq(), output);
  }

  // required uint32 friend0VelDir = 2;
  if (has_friend0veldir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friend0veldir(), output);
  }

  // required uint32 friend1VelEsq = 3;
  if (has_friend1velesq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friend1velesq(), output);
  }

  // required uint32 friend1VelDir = 4;
  if (has_friend1veldir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->friend1veldir(), output);
  }

  // required uint32 friend2VelEsq = 5;
  if (has_friend2velesq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->friend2velesq(), output);
  }

  // required uint32 friend2VelDir = 6;
  if (has_friend2veldir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->friend2veldir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboimeData.DataReceiver)
}

::google::protobuf::uint8* DataReceiver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboimeData.DataReceiver)
  // required uint32 friend0VelEsq = 1;
  if (has_friend0velesq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->friend0velesq(), target);
  }

  // required uint32 friend0VelDir = 2;
  if (has_friend0veldir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friend0veldir(), target);
  }

  // required uint32 friend1VelEsq = 3;
  if (has_friend1velesq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friend1velesq(), target);
  }

  // required uint32 friend1VelDir = 4;
  if (has_friend1veldir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->friend1veldir(), target);
  }

  // required uint32 friend2VelEsq = 5;
  if (has_friend2velesq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->friend2velesq(), target);
  }

  // required uint32 friend2VelDir = 6;
  if (has_friend2veldir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->friend2veldir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboimeData.DataReceiver)
  return target;
}

int DataReceiver::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RoboimeData.DataReceiver)
  int total_size = 0;

  if (has_friend0velesq()) {
    // required uint32 friend0VelEsq = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend0velesq());
  }

  if (has_friend0veldir()) {
    // required uint32 friend0VelDir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend0veldir());
  }

  if (has_friend1velesq()) {
    // required uint32 friend1VelEsq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend1velesq());
  }

  if (has_friend1veldir()) {
    // required uint32 friend1VelDir = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend1veldir());
  }

  if (has_friend2velesq()) {
    // required uint32 friend2VelEsq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend2velesq());
  }

  if (has_friend2veldir()) {
    // required uint32 friend2VelDir = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend2veldir());
  }

  return total_size;
}
int DataReceiver::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RoboimeData.DataReceiver)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint32 friend0VelEsq = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend0velesq());

    // required uint32 friend0VelDir = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend0veldir());

    // required uint32 friend1VelEsq = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend1velesq());

    // required uint32 friend1VelDir = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend1veldir());

    // required uint32 friend2VelEsq = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend2velesq());

    // required uint32 friend2VelDir = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->friend2veldir());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReceiver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoboimeData.DataReceiver)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DataReceiver* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DataReceiver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoboimeData.DataReceiver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoboimeData.DataReceiver)
    MergeFrom(*source);
  }
}

void DataReceiver::MergeFrom(const DataReceiver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoboimeData.DataReceiver)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend0velesq()) {
      set_friend0velesq(from.friend0velesq());
    }
    if (from.has_friend0veldir()) {
      set_friend0veldir(from.friend0veldir());
    }
    if (from.has_friend1velesq()) {
      set_friend1velesq(from.friend1velesq());
    }
    if (from.has_friend1veldir()) {
      set_friend1veldir(from.friend1veldir());
    }
    if (from.has_friend2velesq()) {
      set_friend2velesq(from.friend2velesq());
    }
    if (from.has_friend2veldir()) {
      set_friend2veldir(from.friend2veldir());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DataReceiver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoboimeData.DataReceiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataReceiver::CopyFrom(const DataReceiver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoboimeData.DataReceiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReceiver::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DataReceiver::Swap(DataReceiver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReceiver::InternalSwap(DataReceiver* other) {
  std::swap(friend0velesq_, other->friend0velesq_);
  std::swap(friend0veldir_, other->friend0veldir_);
  std::swap(friend1velesq_, other->friend1velesq_);
  std::swap(friend1veldir_, other->friend1veldir_);
  std::swap(friend2velesq_, other->friend2velesq_);
  std::swap(friend2veldir_, other->friend2veldir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataReceiver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataReceiver_descriptor_;
  metadata.reflection = DataReceiver_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReceiver

// required uint32 friend0VelEsq = 1;
bool DataReceiver::has_friend0velesq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataReceiver::set_has_friend0velesq() {
  _has_bits_[0] |= 0x00000001u;
}
void DataReceiver::clear_has_friend0velesq() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataReceiver::clear_friend0velesq() {
  friend0velesq_ = 0u;
  clear_has_friend0velesq();
}
 ::google::protobuf::uint32 DataReceiver::friend0velesq() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataReceiver.friend0VelEsq)
  return friend0velesq_;
}
 void DataReceiver::set_friend0velesq(::google::protobuf::uint32 value) {
  set_has_friend0velesq();
  friend0velesq_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataReceiver.friend0VelEsq)
}

// required uint32 friend0VelDir = 2;
bool DataReceiver::has_friend0veldir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataReceiver::set_has_friend0veldir() {
  _has_bits_[0] |= 0x00000002u;
}
void DataReceiver::clear_has_friend0veldir() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataReceiver::clear_friend0veldir() {
  friend0veldir_ = 0u;
  clear_has_friend0veldir();
}
 ::google::protobuf::uint32 DataReceiver::friend0veldir() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataReceiver.friend0VelDir)
  return friend0veldir_;
}
 void DataReceiver::set_friend0veldir(::google::protobuf::uint32 value) {
  set_has_friend0veldir();
  friend0veldir_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataReceiver.friend0VelDir)
}

// required uint32 friend1VelEsq = 3;
bool DataReceiver::has_friend1velesq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataReceiver::set_has_friend1velesq() {
  _has_bits_[0] |= 0x00000004u;
}
void DataReceiver::clear_has_friend1velesq() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataReceiver::clear_friend1velesq() {
  friend1velesq_ = 0u;
  clear_has_friend1velesq();
}
 ::google::protobuf::uint32 DataReceiver::friend1velesq() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataReceiver.friend1VelEsq)
  return friend1velesq_;
}
 void DataReceiver::set_friend1velesq(::google::protobuf::uint32 value) {
  set_has_friend1velesq();
  friend1velesq_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataReceiver.friend1VelEsq)
}

// required uint32 friend1VelDir = 4;
bool DataReceiver::has_friend1veldir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataReceiver::set_has_friend1veldir() {
  _has_bits_[0] |= 0x00000008u;
}
void DataReceiver::clear_has_friend1veldir() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataReceiver::clear_friend1veldir() {
  friend1veldir_ = 0u;
  clear_has_friend1veldir();
}
 ::google::protobuf::uint32 DataReceiver::friend1veldir() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataReceiver.friend1VelDir)
  return friend1veldir_;
}
 void DataReceiver::set_friend1veldir(::google::protobuf::uint32 value) {
  set_has_friend1veldir();
  friend1veldir_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataReceiver.friend1VelDir)
}

// required uint32 friend2VelEsq = 5;
bool DataReceiver::has_friend2velesq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataReceiver::set_has_friend2velesq() {
  _has_bits_[0] |= 0x00000010u;
}
void DataReceiver::clear_has_friend2velesq() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataReceiver::clear_friend2velesq() {
  friend2velesq_ = 0u;
  clear_has_friend2velesq();
}
 ::google::protobuf::uint32 DataReceiver::friend2velesq() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataReceiver.friend2VelEsq)
  return friend2velesq_;
}
 void DataReceiver::set_friend2velesq(::google::protobuf::uint32 value) {
  set_has_friend2velesq();
  friend2velesq_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataReceiver.friend2VelEsq)
}

// required uint32 friend2VelDir = 6;
bool DataReceiver::has_friend2veldir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataReceiver::set_has_friend2veldir() {
  _has_bits_[0] |= 0x00000020u;
}
void DataReceiver::clear_has_friend2veldir() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataReceiver::clear_friend2veldir() {
  friend2veldir_ = 0u;
  clear_has_friend2veldir();
}
 ::google::protobuf::uint32 DataReceiver::friend2veldir() const {
  // @@protoc_insertion_point(field_get:RoboimeData.DataReceiver.friend2VelDir)
  return friend2veldir_;
}
 void DataReceiver::set_friend2veldir(::google::protobuf::uint32 value) {
  set_has_friend2veldir();
  friend2veldir_ = value;
  // @@protoc_insertion_point(field_set:RoboimeData.DataReceiver.friend2VelDir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RoboimeData

// @@protoc_insertion_point(global_scope)
